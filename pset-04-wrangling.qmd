---
title: Problem set 4
date: 2025-10-05
---

In the next problem set, we plan to explore the relationship between COVID-19 death rates and vaccination rates across US states by visually examining their correlation. This analysis will involve gathering COVID-19 related data from the CDC's API and then extensively processing it to merge the various datasets. Since the population sizes of states vary significantly, we will focus on comparing rates rather than absolute numbers. To facilitate this, we will also source population data from the US Census to accurately calculate these rates. 

In this problem set we will learn how to extract and wrangle data from the data US Census and CDC APIs.

1. Get an API key from the US Census at <https://api.census.gov/data/key_signup.html>. You can't share this public key. But your code has to run on a TFs computer. Assume the TF will have a file in their working directory named `census-key.R` with the following one line of code:

```
census_key <- "A_CENSUS_KEY_THAT_WORKS"
```

Write a first line of code for your problem set that defines `census_key` by running the code in the file `census-key.R`.

```{r}
source("census-key.R")
```

2. The [US Census API User Guide](https://www.census.gov/content/dam/Census/data/developers/api-user-guide/api-user-guide.pdf)
provides details on how to leverage this valuable resource. We are interested in vintage population estimates for years 2021 and 2022. From the documentation we find that the _endpoint_ is:


```{r}
url <- "https://api.census.gov/data/2021/pep/population"
```

Use the **httr2** package to construct the following GET request.

```
https://api.census.gov/data/2021/pep/population?get=POP_2020,POP_2021,NAME&for=state:*&key=YOURKEYHERE
```

Create an object called `request` of class `httr2_request` with this URL as an endpoint.
Hint: Print out `request` to check that the URL matches what we want.

```{r}
#| message: false
#| warning: false
library(httr2)
# create request object
request <- request(url) |>
  req_url_query(get  = "POP_2020,POP_2021,NAME",
                `for` = "state:*",
                key  = census_key)
# Check the request
request
```

3. Make a request to the US Census API using the `request` object. Save the response to and object named `response`. Check the response status of your request and make sure it was successful. You can learn about _status codes_ [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).

```{r}
# make the request
response <- req_perform(request)
# check the status code
resp_status(response)
```

4. Use a function from the **httr2** package to determine the content type of your response.

```{r}
# display content type
resp_content_type(response)
```

5. Use just one line of code and one function to extract the data into a matrix. 
Hints: 1) Use the `resp_body_json` function. 2) The first row of the matrix will be the variable names and this OK as we will fix in the next exercise.

```{r}
# extract data into matrix
population <- do.call(rbind, resp_body_json(response))
# display few rows of matrix (first row is variable names)
head(population)
```

6. Examine the `population` matrix you just created. Notice that 1) it is not tidy, 2) the column types are not what we want, and 3) the first row is a header. Convert `population` to a tidy dataset. Remove the state ID column and change the name of the column with state names to `state_name`. Add a column with state abbreviations called `state`. Make sure you assign the abbreviations for DC and PR correctly. Hint: Use the **janitor** package to make the first row the header. 

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- population |> 
  # make first row the header
  row_to_names(row_number = 1) |>
  # convert to tibble
  as_tibble() |>
  # remove state ID column
  select(-state) |>
  # rename state column to state_name
  rename(state_name = NAME) |>
  # tidy process
  pivot_longer(cols = starts_with("POP_"),
               names_to = "year",
               values_to = "population") |> 
  # add a column
  mutate(year = str_remove(year, "POP_"),
         population = as.numeric(population),
         year = as.numeric(year),
         state = case_when(state_name == "District of Columbia" ~ "DC",
                           state_name == "Puerto Rico" ~ "PR",
                           TRUE ~ state.abb[match(state_name, state.name)]),
         state_name = as.character(state_name))
# display few rows of this tidy object
head(population)
```

7. As a check, make a barplot of states' 2021 and 2022 populations. Show the state names in the y-axis ordered by population size.  Hint: You will need to use `reorder` and use `facet_wrap`.

```{r}
population |>
  # reorder state when assigning aesthetic mapping
  ggplot(aes(x = reorder(state_name, population), 
             y = population, 
             fill = factor(year))) +
  # plot barplot
  geom_col() +
  # flip coordinates so states appear on y-axis
  coord_flip() +
  # facet by year
  facet_wrap(~year, ncol = 2) +
  labs(x = "State",
       y = "Population",
       title = "US State Populations (2020 vs 2021)",
       fill = "Year")
```

8. The following URL:

```{r}
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
```

points to a JSON file that lists the states in the 10 Public Health Service (PHS) defined by CDC. We want to add these regions to the `population` dataset. To facilitate this create a data frame called `regions` that has three columns `state_name`, `region`, `region_name`. One of the regions has a long name. Change it to something shorter.

```{r}
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
# Parse as list-of-records
raw_list <- fromJSON(url, simplifyVector = FALSE)
# Valid states = 50 + DC + PR
valid_states <- c(state.name, "District of Columbia", "Puerto Rico")
regions <- map_df(raw_list, \(r) tibble(
  state_name  = unlist(r$states, use.names = FALSE),
  region      = as.integer(r$region),
  region_name = r$region_name)) |>
  # shorten long region name
  mutate(region_name = case_when(
    str_detect(region_name, regex("^New York and New Jersey", ignore_case = TRUE)) ~
        "NY/NJ, PR & VI", TRUE ~ region_name)) |>
  # keep only 52 rows (50 + DC + PR)
  filter(state_name %in% valid_states)
```

9. Add a region and region name columns to the `population` data frame.

```{r}
# use left_join() to add regions to population
population <- population |> left_join(regions, by = "state_name")
```

10. From reading <https://data.cdc.gov/> we learn the endpoint `https://data.cdc.gov/resource/pwn4-m3yp.json` provides state level data from SARS-COV2 cases. Use the **httr2** tools you have learned to download this into a data frame. Is all the data there? If not, comment on why.

```{r}
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
req <- request(api)
resp <- req_perform(req)
cases_raw <- resp_body_json(resp, simplifyVector = TRUE) |> as_tibble()
# see how many rows
nrow(cases_raw)
```

Comments: No, not all the data is there. The CDC Socrata API only returns 1,000 rows by default, so the dataset is truncated unless you explicitly use $limit$ and $offset$ to retrieve all rows.

We see exactly 1,000 rows. We should be seeing over $52 \times 3$ rows per state.

11. The reason you see exactly 1,000 rows is because CDC has a default limit. You can change this limit by adding `$limit=10000000000` to the request. Rewrite the previous request to ensure that you receive all the data. Then wrangle the resulting data frame to produce a data frame with columns `state`, `date` (should be the end date) and `cases`. Make sure the cases are numeric and the dates are in `Date` ISO-8601 format.

```{r}
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
# change limit
resp <- request(api) |>
  req_url_query(`$limit` = 10000000000) |>
  req_perform()
cases_raw <- resp_body_json(resp, simplifyVector = TRUE) |>
  as_tibble()
cases <- cases_raw |>
  transmute(state,
            # keep as character, strip off the time part after "T"
            date  = str_sub(end_date, 1, 10),
            cases = parse_double(new_cases)) |>
  arrange(state, date)
# see few rows
head(cases)
```

12. For 2020 and 2021, make a time series plot of cases per 100,000 versus time for each state. Stratify the plot by region name. Make sure to label you graph appropriately. 

```{r}
cases |>
  filter(date >= "2020-01-01", date <= "2021-12-31") |>
  mutate(year = as.integer(substr(date, 1, 4))) |>
  inner_join(population |> select(state, year, population, region_name) |> distinct(),
             by = c("state","year")) |>
  filter(!is.na(region_name)) |>
  mutate(date = as.Date(date),
         rate_100k = 1e5 * cases / population) |>
  ggplot(aes(x = date, y = rate_100k, color = state, group = state)) +
  geom_line(alpha = 0.7, linewidth = 0.35) +
  facet_wrap(~ region_name, ncol = 3, scales = "free_y") +
  labs(title = "Weekly COVID-19 Cases per 100,000 by Region (2020â€“2021)",
       subtitle = "State-level rates using CDC cases and Census PEP population",
       x = "Week ending",
       y = "Cases per 100,000") 
```

13. The dates in the `cases` dataset are stored as character strings. Use the **lubridate** package to properly parse the `date` column, then create a summary table showing the total COVID-19 cases by month and year for 2020 and 2021. The table should have columns for year, month (as month name), and total cases across all states. Order by year and month. Use the **knitr** package and `kable()` function to display the results as a formatted table.

```{r}
library(knitr)
cases |>
  # Parse character into Date
  mutate(date = ymd(date)) |>
  filter(year(date) %in% c(2020, 2021)) |>
  group_by(year = year(date), month = month(date, label = TRUE, abbr = FALSE)) |>
  summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
  arrange(year, month) |>
  kable()
```

14. The following URL provides additional COVID-19 data from the CDC in JSON format:

```{r}
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
```

Use **httr2** to download COVID-19 death data from this endpoint. Make sure to remove the default limit to get all available data. Create a clean dataset called `deaths` with columns `state`, `date`, and `deaths` (renamed from the original column name). Ensure dates are in proper Date format and deaths are numeric.


```{r}
# get all rows (override default 1000)
resp <- request(deaths_url) |>
  req_url_query(`$limit` = 1000000000) |>
  req_perform()
deaths_raw <- resp_body_json(resp, simplifyVector = TRUE) |>
  as_tibble()
# keep state-level totals (no sex/age breakdown), and tidy
deaths <- deaths_raw |>
  transmute(
    state,
    date   = ymd(str_sub(end_date, 1, 10)),
    deaths = as.numeric(covid_19_deaths)
  ) |>
  arrange(state, date)
```

15. Using the `deaths` dataset you created, make a bar plot showing the total COVID-19 deaths by state. Show only the top 10 states with the highest death counts. Order the bars from highest to lowest and use appropriate labels and title.

```{r}
deaths |>
  filter(!state %in% c("United States", "New York City")) |>
  group_by(state) |>
  summarise(covid_19_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
  arrange(desc(covid_19_deaths)) |>
  slice_head(n = 10) |>
  mutate(state = fct_reorder(state, -covid_19_deaths)) |>
  ggplot(aes(x = state, y = covid_19_deaths)) +
  geom_col() +
  labs(title = "Top 10 U.S. States by Total COVID-19 Deaths",
       x = "State",
       y = "Covid-19 Death")
```